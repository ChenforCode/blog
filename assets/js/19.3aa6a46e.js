(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{605:function(t,e,n){"use strict";n.r(e);var s=n(15),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h4",{attrs:{id:"锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#锁"}},[t._v("#")]),t._v(" 锁")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("公平锁与非公平锁")]),t._v(" "),n("ul",[n("li",[t._v("公平锁：指多个线程按照申请锁的顺序来获得锁，类似于排队，先到先得")]),t._v(" "),n("li",[t._v("非公平锁，指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程优先获得锁，可能造成优先级反转或者饥饿现象。就是允许加塞。但是如果加塞失败，就会再次尝试公平锁的方式。先抢先得")]),t._v(" "),n("li",[t._v("ReentrantLock默认是非公平锁")]),t._v(" "),n("li",[t._v("Sychronized也是非公平锁")])])]),t._v(" "),n("li",[n("p",[t._v("可重入锁（递归锁）")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("指同一个线程外层函数获得锁之后，内层函数或者递归函数仍然可以获取该锁。")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("func1(){\n//线程1获取该锁\n\tsychronized(this) {\n\t\tfunc2() {\n\t\t//线程1可以继续获取该锁，否则代码执行不下去\n\t\t\tsychronized(this) {\n\n\t\t\t}\n\t\t}\n\t}\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br")])])]),t._v(" "),n("li",[n("p",[t._v("加锁和解锁只要是匹配的就可以运行成功")])])])]),t._v(" "),n("li",[n("p",[t._v("独占锁/共享锁")])]),t._v(" "),n("li",[n("p",[t._v("自旋锁")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("采用循环的方式去获取锁")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/ChenforCode/chen-imagebed/master/img/20210406223730.png",alt:"image-20210406223730094"}})])]),t._v(" "),n("li",[n("p",[t._v("自旋锁的一个代码例子，lock方法，就是当前线程和原子类比，如果是null，说明锁没人占用，那么将原子类改为自己（代表自己占用锁），如果不是null，那么会用cas一直循环，不是null则set失败，那么返回false，取反变成true，会一直在循环里，相当于就是自旋锁，一直循环等待。直到原子类变成了null，锁可以获取了，就set成功，返回true，取反false，退出while循环。")])]),t._v(" "),n("li",[n("p",[t._v("unlock方法，直接将原子类设置为null即可，这里cas，如果是正确的线程unlock一定会成功，因为锁只能被某一时刻被当前线程获取，然后被当前线程释放。。如果是别的线程释放，肯定会cas失败。因为原子类的当期值一定是加锁的线程。")])])])]),t._v(" "),n("li",[n("p",[t._v("独占锁（写锁）和共享锁（读锁 ）")]),t._v(" "),n("ul",[n("li",[t._v("独占锁，锁只能被一个线程持有，可重入锁和sychronized都是独占锁，这种锁被一个线程拿到之后，可以进行读也可以进行写，没有限制，但是只能允许这个线程操作")]),t._v(" "),n("li",[t._v("ReentrantReadWriteLock，读锁是共享锁，写锁是独占锁")]),t._v(" "),n("li",[t._v("读读可以共存，读写和写写不可以共存")]),t._v(" "),n("li",[t._v("写的过程必须是一个独占+原子的过程，也就是不能被分割打断")]),t._v(" "),n("li",[t._v("写的时候加写锁，ReentrantReadWriteLock.writeLock()，读的时候加读锁，ReentrantReadWriteLock.readLock()"),n("img",{attrs:{src:"https://raw.githubusercontent.com/ChenforCode/chen-imagebed/master/img/20210410152325.png",alt:"image-20210410152324988"}})])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);