(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{453:function(n,s,a){"use strict";a.r(s);var e=a(2),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("p",[n._v("1.首先解决上一节课的疑问：没有找到参数传递的地方，经过我的debug，发现参数传递确实是无效的，\n"),s("img",{attrs:{src:"https://img.hacpai.com/file/2019/11/image-bb0d10d6.png",alt:"image.png"}}),n._v("\n问题在这里，这个地方是创建mappinghandler的地方，这里的paramNameList只是把带有requestParam注解的参数的vaule值，也就是这个参数的名字，换句话说是从前端传过来的参数的名称，但并不是真正的参数的值，然后把这个list转化为args数组，建立一个mappinghandler。")]),n._v(" "),s("p",[n._v("2.接着在handler执行handle方法的时候\n"),s("img",{attrs:{src:"https://img.hacpai.com/file/2019/11/image-61f37d6d.png",alt:"image.png"}}),n._v("\n向invoke传递的参数，仍然是那个args数组。所以也就不存在传值的了。")]),n._v(" "),s("p",[n._v("3.至此，把springmvc的大致过程捋一捋\n@1.项目启动的时候首先是创建一个tomcat服务器，服务器中绑定了一个dispatcherServlet，这个servlet的映射为“/”根路径，意思是所有的请求都会经过这个请求。\n@2.启动server之后，会进行类扫描，把项目包下的所有类都扫描到一个集合中。\n@3.进行mappinghandler的创建，这个创建过程就是对上一步的类进行解析，对带有controller的进行解析，然后对类中带有requestMapping和requestParam注解的方法进行解析。这里是每一个方法对应一个handler\n@4.请求来临，被dispatcherServlet拦截，用循环根据请求的url判断由哪个mappingHandler所处理\n@5.找到了对应的handler，这个时候由于handler已经具有了如下属性：如自己是属于哪个controller，参数是什么，然后利用反射初始化controller实例，接着用invoke方法调用处理，并返回处理结果。")]),n._v(" "),s("p",[n._v("4.接着完成框架，bean的管理\n创建的流程：\n@1循环遍历所需要创建的bean\n@2判断这个bean是否需要先创建依赖，如果不需要，则直接创建bean并放入beanFactory，如果需要创建依赖，则先判断所依赖的baen是否在beanFactory中，如果存在的拿到该依赖并set，然后成功创建该bean，如果不再beanFactory中，则先放弃创建这个 bean，先创建后边的。\n@3以此循环，知道所有的bean创建结束\n@4这样有一个问题，就是无法处理相互依赖的情况，类似于死锁，这个时候就需要判断每次循环之后所需要创建bean的数量是不是有变化，如果没有变化，说明陷入了训话，需要抛出异常，退出循环。")]),n._v(" "),s("p",[n._v("5.首先创建与bean管理相关的注解，@Bean和@AutoWired")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("package cn.chenforcode.beans;\n\nimport java.lang.annotation.*;\n\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface Bean {\n}\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("package cn.chenforcode.beans;\n\nimport java.lang.annotation.*;\n\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface AutoWired {\n}\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("6.创建beanFactory")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private static Map<Class<?>, Object> classToBean = new ConcurrentHashMap<>();\n\n    public static Object getBean(Class<?> cls) {\n        return classToBean.get(cls);\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("保存一个map，存储类和对象，能够根据类类型得到类对象\n然后写出一个方法")]),n._v(" "),s("p",[n._v("7.实现initBean方法，实现bean的初始化")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n     * @Author <a href="http://www.chenforcode.cn">PKUCoder</a>\n     * @Date 2019/11/7 11:44 下午\n     * @Param [classList]\n     * @Return void\n     * @Description 根据扫描到的类定义，进行bean的创建\n     **/\n    public static void initBean(List<Class<?>> classList) throws Exception {\n        List<Class<?>> toCreate = new ArrayList<>(classList);\n        //如果容器中还有，就一直循环\n        while (toCreate.size() != 0) {\n            //保存每次遍历之前的容器大小\n            int remainSize = toCreate.size();\n            //进行遍历创建\n            for (int i = 0; i < toCreate.size(); i++) {\n                //如果创建成功就把它给移除\n                if (finishCreate(toCreate.get(i))) {\n                    toCreate.remove(i);\n                }\n            }\n            //如果一次遍历之后，大小没有变化，说明陷入了循环依赖\n            if (toCreate.size() == remainSize) {\n                throw new Exception("cycle dependency");\n            }\n        }\n    }\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br")])]),s("p",[n._v("8.实现finishBean方法，完成bean创建的具体流程")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n     * @Author <a href="http://www.chenforcode.cn">PKUCoder</a>\n     * @Date 2019/11/8 12:06 上午\n     * @Param [cls]\n     * @Return boolean\n     * @Description 实现bean创建的具体流程\n     **/\n    private static boolean finishCreate(Class<?> cls) throws IllegalAccessException, InstantiationException {\n        //如果没有带这个两个注解，说明不需要创建，则直接返回true\n        if (!cls.isAnnotationPresent(Controller.class) && !cls.isAnnotationPresent(Bean.class)) {\n            return true;\n        }\n        //创建这个类的实例\n        Object bean = cls.newInstance();\n        //然后判断这个类是否需要其他的依赖\n        for (Field field: cls.getDeclaredFields()) {\n            //如果带有@AutoWired注解，则说明需要先初始化该属性\n            if (field.isAnnotationPresent(AutoWired.class)) {\n                //获取到这个属性的type\n                Class<?> fieldType = field.getType();\n                //从工厂中拿到这个bean\n                Object reliantBean = BeanFactory.getBean(fieldType);\n                if (reliantBean == null) {\n                    //如果工厂中还没有这个bean，那么这次创建失败\n                    return false;\n                }\n                //把这个字段的属性设置为可接入，就相当于把private变成public\n                field.setAccessible(true);\n                //将这个属性设置进去\n                field.set(bean, reliantBean);\n                //加入beanFactory\n                BeanFactory.classToBean.put(cls, bean);\n            }\n        }\n        return true;\n    }\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br")])]),s("p",[n._v("9.最后，在handlerMapping修改controller的创建方式\n把直接创建实例变成从工厂中获取")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Object ctl = BeanFactory.getBean(controller);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);